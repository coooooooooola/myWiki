import comp from "/Users/swtywang/Coding/05 我的博客/my-docs-new/src/.vuepress/.temp/pages/posts/后端开发/05 Java栈 - JVM.html.vue"
const data = JSON.parse("{\"path\":\"/posts/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/05%20Java%E6%A0%88%20-%20JVM.html\",\"title\":\"Java栈 - JVM\",\"lang\":\"zh-CN\",\"frontmatter\":{\"title\":\"Java栈 - JVM\",\"date\":\"2020-01-12T00:00:00.000Z\",\"cover\":\"/assets/images/cover4.jpg\",\"headerMask\":\"rgba(40, 57, 101, .4)\",\"catalog\":true,\"tags\":[\"Java\",\"server\"]},\"headers\":[{\"level\":2,\"title\":\"1.1 程序计数器（线程私有）\",\"slug\":\"_1-1-程序计数器-线程私有\",\"link\":\"#_1-1-程序计数器-线程私有\",\"children\":[]},{\"level\":2,\"title\":\"1.2 Java 虚拟机栈（线程私有）\",\"slug\":\"_1-2-java-虚拟机栈-线程私有\",\"link\":\"#_1-2-java-虚拟机栈-线程私有\",\"children\":[]},{\"level\":2,\"title\":\"1.3 本地方法栈（线程私有）\",\"slug\":\"_1-3-本地方法栈-线程私有\",\"link\":\"#_1-3-本地方法栈-线程私有\",\"children\":[]},{\"level\":2,\"title\":\"1.4 Java 堆（线程共享）\",\"slug\":\"_1-4-java-堆-线程共享\",\"link\":\"#_1-4-java-堆-线程共享\",\"children\":[{\"level\":3,\"title\":\"设置堆内存大小和 OOM\",\"slug\":\"设置堆内存大小和-oom\",\"link\":\"#设置堆内存大小和-oom\",\"children\":[]}]},{\"level\":2,\"title\":\"1.5 方法区（线程共享）\",\"slug\":\"_1-5-方法区-线程共享\",\"link\":\"#_1-5-方法区-线程共享\",\"children\":[{\"level\":3,\"title\":\"1.5.1 方法区\",\"slug\":\"_1-5-1-方法区\",\"link\":\"#_1-5-1-方法区\",\"children\":[]},{\"level\":3,\"title\":\"1.5.2 运行时常量池\",\"slug\":\"_1-5-2-运行时常量池\",\"link\":\"#_1-5-2-运行时常量池\",\"children\":[]}]},{\"level\":2,\"title\":\"2.1 对象的创建\",\"slug\":\"_2-1-对象的创建\",\"link\":\"#_2-1-对象的创建\",\"children\":[]},{\"level\":2,\"title\":\"2.2 对象的内存布局\",\"slug\":\"_2-2-对象的内存布局\",\"link\":\"#_2-2-对象的内存布局\",\"children\":[{\"level\":3,\"title\":\"2.2.1 对象头\",\"slug\":\"_2-2-1-对象头\",\"link\":\"#_2-2-1-对象头\",\"children\":[]},{\"level\":3,\"title\":\"2.2.2 实例数据\",\"slug\":\"_2-2-2-实例数据\",\"link\":\"#_2-2-2-实例数据\",\"children\":[]},{\"level\":3,\"title\":\"2.2.3 对齐填充\",\"slug\":\"_2-2-3-对齐填充\",\"link\":\"#_2-2-3-对齐填充\",\"children\":[]}]},{\"level\":2,\"title\":\"2.3 对象的访问定位\",\"slug\":\"_2-3-对象的访问定位\",\"link\":\"#_2-3-对象的访问定位\",\"children\":[]},{\"level\":2,\"title\":\"3.1 如何判断对象已死？\",\"slug\":\"_3-1-如何判断对象已死\",\"link\":\"#_3-1-如何判断对象已死\",\"children\":[]},{\"level\":2,\"title\":\"3.2 引用的四种类型\",\"slug\":\"_3-2-引用的四种类型\",\"link\":\"#_3-2-引用的四种类型\",\"children\":[]},{\"level\":2,\"title\":\"3.3 GC 算法\",\"slug\":\"_3-3-gc-算法\",\"link\":\"#_3-3-gc-算法\",\"children\":[{\"level\":3,\"title\":\"3.3.1 标记-清除算法\",\"slug\":\"_3-3-1-标记-清除算法\",\"link\":\"#_3-3-1-标记-清除算法\",\"children\":[]},{\"level\":3,\"title\":\"3.3.2 复制算法\",\"slug\":\"_3-3-2-复制算法\",\"link\":\"#_3-3-2-复制算法\",\"children\":[]},{\"level\":3,\"title\":\"3.3.3 标记整理算法\",\"slug\":\"_3-3-3-标记整理算法\",\"link\":\"#_3-3-3-标记整理算法\",\"children\":[]},{\"level\":3,\"title\":\"3.3.4 分代收集算法\",\"slug\":\"_3-3-4-分代收集算法\",\"link\":\"#_3-3-4-分代收集算法\",\"children\":[]},{\"level\":3,\"title\":\"3.3.5 GC 流程\",\"slug\":\"_3-3-5-gc-流程\",\"link\":\"#_3-3-5-gc-流程\",\"children\":[]}]},{\"level\":2,\"title\":\"3.4 垃圾收集器\",\"slug\":\"_3-4-垃圾收集器\",\"link\":\"#_3-4-垃圾收集器\",\"children\":[]}],\"git\":{},\"readingTime\":{\"minutes\":19.9,\"words\":5971},\"filePathRelative\":\"posts/后端开发/05 Java栈 - JVM.md\",\"localizedDate\":\"2020年1月12日\",\"excerpt\":\"\\n<p>Java 虚拟机主要分为 方法区、堆、虚拟机栈、本地方法栈、程序计数器五个区域，下面依次介绍各个区域。</p>\\n<h2>1.1 程序计数器（线程私有）</h2>\\n<p>当前线程所执行执行的<strong>字节码行号指示器</strong>。<br>\\nJVM 概念模型中，<strong>字节码解析器</strong>会通过改变程序计数器的值来选取下一条需要执行的字节码指令，分支、循环、跳转、异常处理、线程回复等基础功能都需要该计数器完成。<br>\\n由于<strong>JVM 多线程</strong>通过**线程轮切（并发）**实现，在任何一个确定时刻，一个处理器都只会执行一条线程的指令。因此线程之间计数器互相独立。<br>\\n如果线程正在执行的是一个 Java 方法，这个计数器记录的是正在执行的虚拟机字节码指令的地址；如果正在执行的是 Native 方法(java 调用非 java 代码的接口)，这个计数器值为 Undefined。</p>\"}")
export { comp, data }
