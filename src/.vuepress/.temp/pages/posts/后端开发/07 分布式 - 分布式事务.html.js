import comp from "/Users/swtywang/Coding/05 我的博客/my-docs-new/src/.vuepress/.temp/pages/posts/后端开发/07 分布式 - 分布式事务.html.vue"
const data = JSON.parse("{\"path\":\"/posts/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/07%20%E5%88%86%E5%B8%83%E5%BC%8F%20-%20%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1.html\",\"title\":\"分布式 - 分布式事务\",\"lang\":\"zh-CN\",\"frontmatter\":{\"title\":\"分布式 - 分布式事务\",\"date\":\"2022-06-22T00:00:00.000Z\",\"cover\":\"/assets/images/cover4.jpg\",\"headerMask\":\"rgba(40, 57, 101, .4)\",\"catalog\":true,\"tags\":[\"Java\",\"微服务\",\"server\"],\"gitInclude\":[],\"description\":\"分布式事务主要解决分布式一致性的问题（数据的分布式操作导致仅依靠本地事务无法保证原子性）。 分布式事务场景 下单扣库存 在电商系统中，下单是用户最常见操作。在下单接口中必定会涉及生成订单 id, 扣减库存等操作，对于微服务架构系统，订单 id 与库存服务一般都是独立的服务，此时就需要分布式事务来保证整个下单接口的成功。 支付 转账是最经典那的分布式事务...\",\"head\":[[\"meta\",{\"property\":\"og:url\",\"content\":\"https://swtywang/posts/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/07%20%E5%88%86%E5%B8%83%E5%BC%8F%20-%20%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1.html\"}],[\"meta\",{\"property\":\"og:site_name\",\"content\":\"swtywang's homepage\"}],[\"meta\",{\"property\":\"og:title\",\"content\":\"分布式 - 分布式事务\"}],[\"meta\",{\"property\":\"og:description\",\"content\":\"分布式事务主要解决分布式一致性的问题（数据的分布式操作导致仅依靠本地事务无法保证原子性）。 分布式事务场景 下单扣库存 在电商系统中，下单是用户最常见操作。在下单接口中必定会涉及生成订单 id, 扣减库存等操作，对于微服务架构系统，订单 id 与库存服务一般都是独立的服务，此时就需要分布式事务来保证整个下单接口的成功。 支付 转账是最经典那的分布式事务...\"}],[\"meta\",{\"property\":\"og:type\",\"content\":\"article\"}],[\"meta\",{\"property\":\"og:image\",\"content\":\"https://swtywang/assets/images/cover4.jpg\"}],[\"meta\",{\"property\":\"og:locale\",\"content\":\"zh-CN\"}],[\"meta\",{\"name\":\"twitter:card\",\"content\":\"summary_large_image\"}],[\"meta\",{\"name\":\"twitter:image:src\",\"content\":\"https://swtywang/assets/images/cover4.jpg\"}],[\"meta\",{\"name\":\"twitter:image:alt\",\"content\":\"分布式 - 分布式事务\"}],[\"meta\",{\"property\":\"article:tag\",\"content\":\"Java\"}],[\"meta\",{\"property\":\"article:tag\",\"content\":\"微服务\"}],[\"meta\",{\"property\":\"article:tag\",\"content\":\"server\"}],[\"meta\",{\"property\":\"article:published_time\",\"content\":\"2022-06-22T00:00:00.000Z\"}],[\"script\",{\"type\":\"application/ld+json\"},\"{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@type\\\":\\\"Article\\\",\\\"headline\\\":\\\"分布式 - 分布式事务\\\",\\\"image\\\":[\\\"https://swtywang.fun/minio/blog/b664a597749eb55ab6bf7ba3e79ef9a1.jpg\\\",\\\"https://swtywang.fun/minio/blog/9f93602225dd2a1385d8134793d60cda.jpg\\\"],\\\"datePublished\\\":\\\"2022-06-22T00:00:00.000Z\\\",\\\"dateModified\\\":null,\\\"author\\\":[{\\\"@type\\\":\\\"Person\\\",\\\"name\\\":\\\"swtywang\\\",\\\"url\\\":\\\"https:www.baidu.com\\\"}]}\"]]},\"headers\":[{\"level\":2,\"title\":\"分布式事务场景\",\"slug\":\"分布式事务场景\",\"link\":\"#分布式事务场景\",\"children\":[{\"level\":3,\"title\":\"下单扣库存\",\"slug\":\"下单扣库存\",\"link\":\"#下单扣库存\",\"children\":[]},{\"level\":3,\"title\":\"支付\",\"slug\":\"支付\",\"link\":\"#支付\",\"children\":[]}]},{\"level\":2,\"title\":\"分布式基础理论\",\"slug\":\"分布式基础理论\",\"link\":\"#分布式基础理论\",\"children\":[{\"level\":3,\"title\":\"CAP 原则\",\"slug\":\"cap-原则\",\"link\":\"#cap-原则\",\"children\":[]},{\"level\":3,\"title\":\"BASE 定理\",\"slug\":\"base-定理\",\"link\":\"#base-定理\",\"children\":[]},{\"level\":3,\"title\":\"柔性事务\",\"slug\":\"柔性事务\",\"link\":\"#柔性事务\",\"children\":[]},{\"level\":3,\"title\":\"幂等操作\",\"slug\":\"幂等操作\",\"link\":\"#幂等操作\",\"children\":[]}]},{\"level\":2,\"title\":\"分布式事务实现方案\",\"slug\":\"分布式事务实现方案\",\"link\":\"#分布式事务实现方案\",\"children\":[{\"level\":3,\"title\":\"本地消息表\",\"slug\":\"本地消息表\",\"link\":\"#本地消息表\",\"children\":[]},{\"level\":3,\"title\":\"事务消息\",\"slug\":\"事务消息\",\"link\":\"#事务消息\",\"children\":[]}]}],\"readingTime\":{\"minutes\":9.54,\"words\":2862},\"filePathRelative\":\"posts/后端开发/07 分布式 - 分布式事务.md\",\"localizedDate\":\"2022年6月22日\",\"excerpt\":\"<blockquote>\\n<p>分布式事务主要解决分布式一致性的问题（数据的分布式操作导致仅依靠本地事务无法保证原子性）。</p>\\n</blockquote>\\n<h2>分布式事务场景</h2>\\n<h3>下单扣库存</h3>\\n<p>在电商系统中，下单是用户最常见操作。在下单接口中必定会涉及生成订单 id, 扣减库存等操作，对于微服务架构系统，订单 id 与库存服务一般都是独立的服务，此时就需要分布式事务来保证整个下单接口的成功。</p>\\n<h3>支付</h3>\\n<p>转账是最经典那的分布式事务场景，假设用户 A 使用银行 app 发起一笔跨行转账给用户 B，银行系统首先扣掉用户 A 的钱，然后增加用户 B 账户中的余额。此时就会出现 2 种异常情况：1. 用户 A 的账户扣款成功，用户 B 账户余额增加失败 2. 用户 A 账户扣款失败，用户 B 账户余额增加成功。对于银行系统来说，以上 2 种情况都是不允许发生，此时就需要分布式事务来保证转账操作的成功。</p>\",\"autoDesc\":true}")
export { comp, data }

if (import.meta.webpackHot) {
  import.meta.webpackHot.accept()
  if (__VUE_HMR_RUNTIME__.updatePageData) {
    __VUE_HMR_RUNTIME__.updatePageData(data)
  }
}

if (import.meta.hot) {
  import.meta.hot.accept(({ data }) => {
    __VUE_HMR_RUNTIME__.updatePageData(data)
  })
}
